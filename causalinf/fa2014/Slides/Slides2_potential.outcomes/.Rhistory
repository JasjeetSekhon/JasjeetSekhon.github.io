quantiles.firm
d$individual.group = individual.group
d$individual.group
d1 = d[d$individual.group==1,]
dim(d1)
P = matrix(rep(9,10*10),ncol=10)
min(d$year)
time
k=1
p.vec = matrix(rep(9,(T-1)*10),ncol=T-1)
p.vec
p.vec = matrix(rep(9,(time-1)*10),ncol=T-1)
p.vec = matrix(rep(9,(time-1)*10),ncol=time-1)
p.vec
i=1
d$year
year0=c(min(d$year):(min(d$year)+time))[i]
year0
ind0 = d[d$year==year0 & d$firm.group==k,]$id
ind0
d$year
year0
d$firm.group
d$group.firm
d$firm.group
d$firm.group = firm.group
d$individual.group = individual.group
d$firm.group
ind0 = d[d$year==year0 & d$firm.group==k,]$id
ind0
ind1 = d$id %in% ind0 & d$year==(year0+1)
ind1
p.vec[,i] = with(d[ind1,],table(firm.group))/length(ind0)
p.vec[,i]
d0=d
d = d[d$individual.group==1,]
P = matrix(rep(9,10*10),ncol=10)
for (k in c(1:10)){
p.vec = matrix(rep(9,(time-1)*10),ncol=time-1)
for (i in c(1:(time-1))){
year0=c(min(d$year):(min(d$year)+time))[i]
ind0 = d[d$year==year0 & d$firm.group==k,]$id
ind1 = d$id %in% ind0 & d$year==(year0+1)
p.vec[,i] = with(d[ind1,],table(firm.group))/length(ind0)
}
P[k,] = apply(p.vec,1,mean)
}
dim(d)
P = matrix(rep(9,10*10),ncol=10)
P = matrix(rep(9,10*10),ncol=10)
for (k in c(1:10)){
p.vec = matrix(rep(9,(time-1)*10),ncol=time-1)
for (i in c(1:(time-1))){
year0=c(min(d$year):(min(d$year)+time))[i]
ind0 = d[d$year==year0 & d$firm.group==k,]$id
ind1 = d$id %in% ind0 & d$year==(year0+1)
p.vec[,i] = with(d[ind1,],table(firm.group))/length(ind0)
}
P[k,] = apply(p.vec,1,mean)
}
k
i
p.vec = matrix(rep(9,(time-1)*10),ncol=time-1)
year0=c(min(d$year):(min(d$year)+time))[i]
ind0 = d[d$year==year0 & d$firm.group==k,]$id
ind1 = d$id %in% ind0 & d$year==(year0+1)
ind0
ind1
year0=c(min(d$year):(min(d$year)+time))[i]
ind0 = d[d$year==year0 & d$firm.group==k,]$id
ind0
ind1 = d$id %in% ind0 & d$year==(year0+1)
ind1
p.vec[,i] = with(d[ind1,],table(firm.group))/length(ind0)
d=d0
d = d[d$individual.group==5,]
P = matrix(rep(9,10*10),ncol=10)
for (k in c(1:10)){
p.vec = matrix(rep(9,(time-1)*10),ncol=time-1)
for (i in c(1:(time-1))){
year0=c(min(d$year):(min(d$year)+time))[i]
ind0 = d[d$year==year0 & d$firm.group==k,]$id
ind1 = d$id %in% ind0 & d$year==(year0+1)
p.vec[,i] = with(d[ind1,],table(firm.group))/length(ind0)
}
P[k,] = apply(p.vec,1,mean)
}
d=d0
dim(d)
d = d[d$individual.group<=5,]
P = matrix(rep(9,10*10),ncol=10)
for (k in c(1:10)){
p.vec = matrix(rep(9,(time-1)*10),ncol=time-1)
for (i in c(1:(time-1))){
year0=c(min(d$year):(min(d$year)+time))[i]
ind0 = d[d$year==year0 & d$firm.group==k,]$id
ind1 = d$id %in% ind0 & d$year==(year0+1)
p.vec[,i] = with(d[ind1,],table(firm.group))/length(ind0)
}
P[k,] = apply(p.vec,1,mean)
}
i
k
d = d[d$individual.group<=5,]
P = matrix(rep(9,10*10),ncol=10)
for (k in c(1:10)){
p.vec = matrix(rep(9,(time-1)*10),ncol=time-1)
for (i in c(1:(time-1))){
year0=c(min(d$year):(min(d$year)+time))[i]
ind0 = d[d$year==year0 & d$firm.group==k,]$id
ind1 = d$id %in% ind0 & d$year==(year0+1)
p.vec[,i] = with(d[ind1,],table(firm.group))/length(ind0)
}
P[k,] = apply(p.vec,1,mean)
}
dim(d)
P = matrix(rep(9,10*10),ncol=10)
p.vec = matrix(rep(9,(time-1)*10),ncol=time-1)
year0=c(min(d$year):(min(d$year)+time))[i]
ind0 = d[d$year==year0 & d$firm.group==k,]$id
ind0
ind1 = d$id %in% ind0 & d$year==(year0+1)
ind1
p.vec[,i] = with(d[ind1,],table(firm.group))/length(ind0)
p.vec[,i] = with(d[ind1,],table(d$firm.group))/length(ind0)
p.vec[,i]
p.vec[,i] = with(d[ind1,],table(d$firm.group))/length(ind0)
p.vec[,i]
length(ind0)
with(d[ind1,],table(d$firm.group))
rm(list=ls(all=T))
load("~/Documents/Card/R code/data.sample.RData")
d = d0[,c("id","year","firmid","y")]
### basic parameters:
N = length(unique(d$id)) #the number of individuals
J = length(unique(d$firmid)) #the number of firms
time = length(unique(d$year)) #the number of periods
dim(d)
option=2
# There are two options:
# 1. instrument - the individual's co-workers.
# 2. the average income over the years.
id.unique = unique(d$id)
if (option==1){
### finding the co-workers of individual "i"
individual.fixed = rep(999,length(id.unique))
for (i in c(1:length(id.unique))){
firms.work = unique(d$firmid[d$id==id.unique[i]])
individual.fixed[i] = mean(d$y[d$firmid %in% firms.work & d$id!=id.unique[i]])
}
}
if (option==2){
individual.fixed = rep(999,length(id.unique))
for (i in c(1:length(id.unique))){
individual.fixed[i] = mean(d$y[d$id==id.unique[i]])
}
# or
#individual.fixed = with(d,tapply(y,id,mean))
}
#######################################################################################
# Step 2: Approximation of the firms fixed effects, dividing into 10 groups
#######################################################################################
firmid.unique = unique(d$firmid)
firm.fixed = rep(999,length(firmid.unique))
for (j in c(1:length(firmid.unique))){
firm.fixed[j] = mean(d$y[d$firmid==firmid.unique[j]])
}
### Firm group indicator:
quantiles.firm = quantile(firm.fixed,probs=seq(0.1,1,by=0.1))
# defining a firm group indicator:
firm.group  = rep(9999,dim(d)[1])
firm.group[firm.fixed<=quantiles.firm[1]] = 1
for (j in c(2:10)){
firm.group[firm.fixed>quantiles.firm[j-1] & firm.fixed<=quantiles.firm[j]] = j
}
### Worker group indicator:
quantiles.individual = quantile(individual.fixed,probs=seq(0.1,1,by=0.1))
# defining a worker group indicator:
individual.group  = rep(9999,dim(d)[1])
individual.group[individual.fixed<=quantiles.individual[1]] = 1
for (j in c(2:10)){
individual.group[individual.fixed>quantiles.individual[j-1] & individual.fixed<=quantiles.individual[j]] = j
}
### adding group indicator to the data:
d$firm.group = firm.group
d$individual.group = individual.group
k
i=1
p.vec = matrix(rep(9,(time-1)*10),ncol=time-1)
p.vec
year0=c(min(d$year):(min(d$year)+time))[i]
year0
ind0 = d[d$year==year0 & d$firm.group==k,]$id
k
k=1
i
k
ind0 = d[d$year==year0 & d$firm.group==k,]$id
ind0
ind0 = d[d$year==year0 & d$firm.group==k,]$id
ind0 = d[d$year==year0 & d$firm.group==k,]$id
ind0
ind1 = d$id %in% ind0 & d$year==(year0+1)
ind1
length(ind0)
length(ind1)
with(d[ind1,],table(firm.group))
p.vec[,i] = with(d[ind1,],table(firm.group))/length(ind0)
p.vec[,i]
sum(p.vec[,i])
rm(list=ls(all=T))
1
rm(list=ls(all=TRUE))
# install.pakcages(Matching)
library(Matching)
### Loading the data
data(GerberGreenImai)
d = GerberGreenImai
head(d)
table(d$PERSONS)
table(d$MAILGRP)
table(d$PHONEGRP)
table(d$PERSNGRP)
table(d$APPEAL)
table(d$phone)
table(d$PERSNGRP)
table(d$CONTACT)
table(d$MAILINGS)
table(d$MAILCALL)
table(d$VOTED98)
table(d$MAILGRP)
View(d)
table(d$APPEAL)
table(d$CONTACT)
install.packages("fmsb")
x1<- rbinom(100,size=1,prob=1/2)
x2<- rbinom(100,size=1,prob=0.56)
Kappa.test(x1,x2)
library(fmsb)
Kappa.test(x1,x2)
N=20
m=5
## analytical:
cov = (m/N)*(m-1)/(N-1)
cov
sample(c(1:N),m,replace=FALSE)
sample(c(1:N),m,replace=FALSE)
z1<-z2<-rep(999,R)
rm(list=ls(all=TRUE))
set.seed(1)
### Parameters:
N=20
m=5
R=100000
## analytical:
cov = (m/N)*(m-1)/(N-1)
### Simulation:
z1<-z2<-rep(999,R)
for (i in c(1:R)){
id.treat = sample(c(1:N),m,replace=FALSE)
treat0 = rep(0,N)
treat0[id.treat]=1
z1[i] = treat0[1]
z2[i] = treat0[2]
}
cov(z1,z2)
cov
cov = (m/N)-(m-1)/(N-1)
cov
cov = (m/N)*((m-1)/(N-1)-(m/N))
cov
rm(list=ls(all=TRUE))
set.seed(1)
### Parameters:
N=20
m=5
R=1000000
## analytical:
cov = (m/N)*((m-1)/(N-1)-(m/N))
### Simulation:
z1<-z2<-rep(999,R)
for (i in c(1:R)){
id.treat = sample(c(1:N),m,replace=FALSE)
treat0 = rep(0,N)
treat0[id.treat]=1
z1[i] = treat0[1]
z2[i] = treat0[2]
}
cov(z1,z2)
cov
rm(list=ls(all=TRUE))
set.seed(12345)
#############################################
# Option 1: R=10000
#############################################
### Parameters:
m=4
R=10000
n.vec = c(c(5:20),seq(21,100,by=5))
cov.real1 <- cov.approx1 <- rep(999,length(n.vec))
for (i in c(1:length(n.vec))){
N = n.vec[i]
cat("sample size:  ",N,"\n")
## analytical:
cov.real1[i] <- (m/N)*((m-1)/(N-1)-(m/N))
### Simulation:
z1<-z2<-rep(999,R)
for (j in c(1:R)){
id.treat = sample(c(1:N),m,replace=FALSE)
treat0 = rep(0,N)
treat0[id.treat]=1
z1[j] = treat0[1]
z2[j] = treat0[2]
}
cov.approx1[i] <- cov(z1,z2)
}
rm(list=ls(all=TRUE))
set.seed(12345)
#############################################
# Option 1: R=10000
#############################################
### Parameters:
m=4
R=10000
n.vec = c(c(5:20),seq(21,100,by=5))
cov.real1 <- cov.approx1 <- rep(999,length(n.vec))
for (i in c(1:length(n.vec))){
N = n.vec[i]
cat("sample size:  ",N,"\n")
## analytical:
cov.real1[i] <- (m/N)*((m-1)/(N-1)-(m/N))
### Simulation:
z1<-z2<-rep(999,R)
for (j in c(1:R)){
id.treat = sample(c(1:N),m,replace=FALSE)
treat0 = rep(0,N)
treat0[id.treat]=1
z1[j] = treat0[1]
z2[j] = treat0[2]
}
cov.approx1[i] <- cov(z1,z2)
}
par(cex=0.7)
plot(n.vec,cov.real1,las=1,col="blue2",pch=16)
points(n.vec,cov.approx1,las=1,col="red2",pch=16)
#############################################
# Option 2: R=500000s
#############################################
### Parameters:
m=4
R=1000000
n.vec = c(c(5:20),seq(21,100,by=5))
cov.real2 <- cov.approx2 <- rep(999,length(n.vec))
for (i in c(1:length(n.vec))){
N = n.vec[i]
cat("sample size:  ",N,"\n")
## analytical:
cov.real2[i] <- (m/N)*((m-1)/(N-1)-(m/N))
### Simulation:
z1<-z2<-rep(999,R)
for (j in c(1:R)){
id.treat = sample(c(1:N),m,replace=FALSE)
treat0 = rep(0,N)
treat0[id.treat]=1
z1[j] = treat0[1]
z2[j] = treat0[2]
}
cov.approx2[i] <- cov(z1,z2)
}
rm(list=ls(all=TRUE))
set.seed(12345)
#############################################
# Option 1: R=10000
#############################################
### Parameters:
m=4
R=10000
n.vec = c(c(5:20),seq(21,100,by=5))
cov.real1 <- cov.approx1 <- rep(999,length(n.vec))
for (i in c(1:length(n.vec))){
N = n.vec[i]
cat("sample size:  ",N,"\n")
## analytical:
cov.real1[i] <- (m/N)*((m-1)/(N-1)-(m/N))
### Simulation:
z1<-z2<-rep(999,R)
for (j in c(1:R)){
id.treat = sample(c(1:N),m,replace=FALSE)
treat0 = rep(0,N)
treat0[id.treat]=1
z1[j] = treat0[1]
z2[j] = treat0[2]
}
cov.approx1[i] <- cov(z1,z2)
}
par(cex=0.7)
plot(n.vec,cov.real1,las=1,col="blue2",pch=16)
points(n.vec,cov.approx1,las=1,col="red2",pch=16)
#############################################
# Option 2: R=500000s
#############################################
### Parameters:
m=4
R=500000
n.vec = c(c(5:20),seq(21,100,by=5))
cov.real2 <- cov.approx2 <- rep(999,length(n.vec))
for (i in c(1:length(n.vec))){
N = n.vec[i]
cat("sample size:  ",N,"\n")
## analytical:
cov.real2[i] <- (m/N)*((m-1)/(N-1)-(m/N))
### Simulation:
z1<-z2<-rep(999,R)
for (j in c(1:R)){
id.treat = sample(c(1:N),m,replace=FALSE)
treat0 = rep(0,N)
treat0[id.treat]=1
z1[j] = treat0[1]
z2[j] = treat0[2]
}
cov.approx2[i] <- cov(z1,z2)
}
par(cex=0.7)
plot(n.vec,cov.real2,las=1,col="blue2",pch=16)
points(n.vec,cov.approx2,las=1,col="red2",pch=16)
data.frame(N=n.vec,approx1=cov.approx1,approx2=cov.approx2,cov.real=cov.real)
cov.real1
cov.real2
data.frame(N=n.vec,approx1=cov.approx1,approx2=cov.approx2,cov.real=cov.real1)
ggplot(data.frame(N=n.vec,approx1=cov.approx1,approx2=cov.approx2,cov.real=cov.real1))+
geom_points(aes(x=N,y=approx1))
library(ggplot2)
ggplot(data.frame(N=n.vec,approx1=cov.approx1,approx2=cov.approx2,cov.real=cov.real1))+
geom_points(aes(x=N,y=approx1))
ggplot(data.frame(N=n.vec,approx1=cov.approx1,approx2=cov.approx2,cov.real=cov.real1))+
geom_point(aes(x=N,y=approx1))
ggplot(data.frame(N=n.vec,approx1=cov.approx1,approx2=cov.approx2,cov.real=cov.real1))+
geom_point(aes(x=N,y=approx1,col="blue"))
par(cex=0.7)
plot(n.vec,cov.real2,las=1,col="blue2",pch=16)
points(n.vec,cov.approx2,las=1,col="red2",pch=16)
par(cex=0.7)
plot(n.vec,cov.real2,las=1,col="blue2",pch=16)
points(n.vec,cov.approx2,las=1,col="red3",pch=16)
points(n.vec,cov.approx1,las=1,col="green3",pch=16)
points(n.vec,cov.approx1,las=1,col="green4",pch=16)
par(cex=0.7)
plot(n.vec,cov.real2,las=1,col="blue3",pch=16)
liness(n.vec,cov.approx2,las=1,col="red3",pch=16)
lines(n.vec,cov.approx2,las=1,col="red3",pch=16)
lines(n.vec,cov.approx1,las=1,col="green4",pch=16)
### Parameters:
m=4
R=1000
n.vec = c(c(5:20),seq(21,100,by=5))
cov.real1 <- cov.approx1 <- rep(999,length(n.vec))
for (i in c(1:length(n.vec))){
N = n.vec[i]
cat("sample size:  ",N,"\n")
## analytical:
cov.real1[i] <- (m/N)*((m-1)/(N-1)-(m/N))
### Simulation:
z1<-z2<-rep(999,R)
for (j in c(1:R)){
id.treat = sample(c(1:N),m,replace=FALSE)
treat0 = rep(0,N)
treat0[id.treat]=1
z1[j] = treat0[1]
z2[j] = treat0[2]
}
cov.approx1[i] <- cov(z1,z2)
}
par(cex=0.7)
plot(n.vec,cov.real2,las=1,col="blue3",pch=16)
lines(n.vec,cov.approx2,las=1,col="red3",pch=16)
lines(n.vec,cov.approx1,las=1,col="green4",pch=16)
par(cex=0.7)
plot(n.vec,cov.real2,las=1,col="blue3",pch=16)
points(n.vec,cov.approx2,las=1,col="red3",pch=16)
points(n.vec,cov.approx1,las=1,col="green4",pch=16)
par(cex=0.7)
plot(n.vec,cov.real2,las=1,col="blue3",pch=16,
ylab="Covariance",xlab="Sample size (N)")
points(n.vec,cov.approx2,las=1,col="red3",pch=16)
points(n.vec,cov.approx1,las=1,col="green4",pch=16)
points(n.vec,cov.approx1,las=1,col="green5",pch=16)
list.files()
setwd("./~Documents/Slides_potential")
setwd("./~Documents/slides_potential")
setwd(".~/Documents/Slides_potential")
setwd("~./Documents/Slides_potential")
setwd("~./Documents/slides_potential")
setwd("./Documents/Slides_potential")
pdf("figure_cov.pdf",width=4.5,height=4)
par(cex=0.7)
plot(n.vec,cov.real2,las=1,col="blue3",pch=16,
ylab="Covariance",xlab="Sample size (N)")
points(n.vec,cov.approx2,las=1,col="red3",pch=16)
points(n.vec,cov.approx1,las=1,col="green4",pch=16)
dev.off()
pdf("figure_cov.pdf",width=4.5,height=4)
par(cex=0.7)
plot(n.vec,cov.approx1,las=1,col="green4",pch=16,
ylab="Covariance",xlab="Sample size (N)")
points(n.vec,cov.approx2,las=1,col="red3",pch=16)
points(n.vec,cov.real2,las=1,col="blue3",pch=16)
dev.off()
par(cex=0.7)
plot(n.vec,cov.approx1,las=1,col="green4",pch=16,
ylab="Covariance",xlab="Sample size (N)")
points(n.vec,cov.approx2,las=1,col="red3",pch=16)
points(n.vec,cov.real2,las=1,col="blue3",pch=16)

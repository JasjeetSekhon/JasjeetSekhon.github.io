pr=1-(1/(1-exp(z)))
plot(pr,z)
pr
pr=1-(1/(1+exp(z)))
plot(pr,z)
for(i in 1:2000){tr[i]=sample(c(0,1),prob=c(1-pr[i],pr[i]),replace=F,size=1)}
plot(density(z[tr==1]))
lines(density(z[tr==0]),lty=2)
lines(density(x0[tr==0]),lty=2)
plot(density(x0[tr==0]),lty=2)
lines(density(x0[tr==1]),lty=1)
y1=y0*p+rnorm(n=2000)
plot(y1)
plot(y1-y0)
plot(y1,y0)
plot(y1,x0)
p
Y=y1
Y[tr==0]=y0[tr==0]
lm(Y~x0+tr)
summary(lm(Y~x0+tr))
a
b
p
summary(lm(Y~x0*tr))
a
b
p
mout=Match(Tr,X=z)
mout=Match(Tr=tr,X=z,Y=Y)
summary(mout)
p
gmout=GenMatch(Tr=tr,X=z,Y=Y)
gmout=GenMatch(Tr=tr,X=z,pop=1000)
y1=a+b*x0*p+rnorm(n=2000)
Y[tr==0]=y0[tr==0]
Y[tr==1]=y1[tr==1]
lm(Y~x0+tr)
lm(Y~x0*tr)
y1=a+b*x0*p+p+b*x0+rnorm(n=2000)
Y[tr==0]=y0[tr==0]
Y[tr==1]=y1[tr==1]
lm(Y~x0+tr)
lm(Y~x0*tr)
a
b
p
gmout=GenMatch(Tr=tr,X=z,pop=1000,estimand='ATE')
gmout=GenMatch(Tr=tr,X=z,pop=100,estimand='ATE')
Match(Tr=tr,X=z,pop=100,estimand='ATE',Weight,matrix=gmout)
Match(Tr=tr,X=z,estimand='ATE',Weight,matrix=gmout)
Match(Tr=tr,X=z,estimand='ATE',Weight.matrix=gmout)
summary(Match(Tr=tr,X=z,estimand='ATE',Weight.matrix=gmout))
summary(Match(Y=Y,Tr=tr,X=z,estimand='ATE',Weight.matrix=gmout))
p
x
tr
X=cbind(1,x,tr)
solve(t(X)%*X)
solve(t(X)%*%X)
solve(t(X)%*%X)%*%t(X)%*%Y
solve(t(X)%*%X)%*%(t(X)%*%Y)
length(Y)
dim(X)
solve(t(X)%*%X)%*%(t(X)%*%Y)
length(tr)
length(x)
length(x0)
X=cbind(1,x0,tr)
solve(t(X)%*%X)%*%(t(X)%*%Y)
lm(y~x0+tr)
lm(Y~x0+tr)
summary(lm(Y~x0+tr))
t(X)%*%X
solve(t(X)%*%X)
Y-X
(Y-X)^2
solve(t(X)%*%X)%*%(t(X)%*%Y)
coefs=solve(t(X)%*%X)%*%(t(X)%*%Y)
coefs
coefs%*%X
coefs%*%t(X)
t(X)%*%coefs
(X)%*%coefs
Y-(X)%*%coefs
(Y-(X)%*%coefs)^2
sum((Y-(X)%*%coefs)^2)
sum((Y-(X)%*%coefs)^2)/(2000-3)
sig=sum((Y-(X)%*%coefs)^2)/(2000-3)
sig*solve(t(X)%*%X)
diag(sig*solve(t(X)%*%X))
lm(Y~X)
lm(Y~x0+tr)
summary(lm(Y~x0+tr))
diag(sig*solve(t(X)%*%X))
sum((Y-(X)%*%coefs)^2)/(2000-3)
diag(sig*solve(t(X)%*%X))
sqrt(diag(sig*solve(t(X)%*%X)))
binomial
rbinomial
rbinom
?rbinom
output
report()
?function
??function
x
C
x0
tr=x0
tr[x0>1]=1
tr[x0>0]=1
tr[x0<=0]=0
y
y0
lm(y~tr+x0)
length(y0)
lm(y0~tr+x0)
summary(lm(y0~tr+x0))
tr
plot(x0[tr==1])
plot(x0[tr==0])
y0
plot(x0,y0)
plot(x0[tr==1],y0[tr==1])
plot(x0[tr==0],y0[tr==0])
plot(x0[tr==0],y0[tr==0],xlim=c(-10,10))
plot(x0[tr==0],y0[tr==0],xlim=c(-2,2))
plot(x0[tr==0],y0[tr==0],xlim=c(-3,3),ylim=c(-10,10))
points(x0[tr==1],y0[tr==1],xlim=c(-3,3),ylim=c(-10,10),col='red')
library(Matching)
names(lalond)
names(lalonde)
lalonde
library(Matching)
lalonde
objects()
load(lalonde)
data(lalonde)
names(lalonde)
treat
attach(lalonde)
treat
y=re75
y[treat==1]
y[treat==1]-y[treat==0]
t.test(y[treat==1],y[treat==0])
educ
lm(y[treat==1]~age[treat==1]+educ[treat==1])
lm(y[treat==1]~age[treat==1]+educ[treat==1]+treat[treat==1])
lm(y[treat==1]~age[treat==1]+educ[treat==1])
lm(y~age+educ+treat)
y[treat==1]-318.11 - 22.25*age[treat==1] - 38.79*educ[treat==1]
mean(y[treat==1]-318.11 - 22.25*age[treat==1] - 38.79*educ[treat==1])-mean(y[treat==1]-318.11 - 22.25*age[treat==1] - 38.79*educ[treat==1])
lm(y~age+educ+treat)
lm(y[treat==1]~age[treat==1]+educ[treat==1])
mean(y[treat==1]-318.11 - 22.25*age[treat==1] - 38.79*educ[treat==1])-mean(y[treat==1]-625.93 - 31.74*age[treat==1] - 8.38*educ[treat==1])
(y[treat==1]-318.11 - 22.25*age[treat==1] - 38.79*educ[treat==1])-(y[treat==1]-625.93 - 31.74*age[treat==1] - 8.38*educ[treat==1])
mean(y[treat==1]-318.11 - 22.25*age[treat==1] - 38.79*educ[treat==1])-(y[treat==1]-625.93 - 31.74*age[treat==1] - 8.38*educ[treat==1])
mean((y[treat==1]-318.11 - 22.25*age[treat==1] - 38.79*educ[treat==1])-(y[treat==1]-625.93 - 31.74*age[treat==1] - 8.38*educ[treat==1]))
Match(Y=re75,Tr=treat,estimand='ATT',X=cbind(age,educ))
summary(Match(Y=re75,Tr=treat,estimand='ATT',X=cbind(age,educ)))
summary(Match(Y=re74,Tr=treat,estimand='ATT',X=cbind(age,educ)))
plot(re75,y)
summary(Match(Y=re75,Tr=treat,estimand='ATT',X=cbind(age,educ)))
summary(Match(Y=re75,Tr=treat,estimand='ATE',X=cbind(age,educ)))
summary(Match(Y=re75,Tr=treat,estimand='ATC',X=cbind(age,educ)))
lm(y~treat+educ+age)
sum(y-318.11-38.79*educ-22.25*age)
sum((y-318.11-38.79*educ-22.25*age)^2)
((y-318.11-38.79*educ-22.25*age))
r1=((y-318.11-38.79*educ-22.25*age))
r1=((y[treat==1]-318.11-38.79*educ[treat==1]-22.25*age[treat==1]))
lm(y[treat==1]~educ[treat==1]+age[treat==1])
r2=((y[treat==1]-625.93-8.37*educ[treat==1]-31.74*age[treat==1]))
c(r1,r2)
r=c(r1,r2)
tr=c(rep(1,length(r1)),rep(0,length(r1)))
r
mean(r[tr==1])
mean(r[tr==1])-mean(r[tr==0])
r[tr==0]
lm(r~tr)
summary(lm(r~tr))
summary(Match(Y=re75,Tr=treat,estimand='ATT',X=cbind(age,educ)))
(GenMatch(Y=re75,Tr=treat,estimand='ATT',X=cbind(age,educ)))
help.start()
>mean
?mean
Installing Packages:#
# Jas's matching package#
# note: dependencies = TRUE is important to also download all child packages#
install.packages("Matching", dependencies = TRUE)#
install.packages("rgenoud")#
#
# useful package for dealing with external data files#
install.packages("foreign")#
#
# Using packages:#
#
# we must load the package we just installed in order to use it#
# note: you only have to install once, but you must load libraries every time you want to use them #
#
library(Matching)#
library(MASS)#
library(foreign)
libray(foreign)
library(foreign)
ls()
A Brief Introduction to R#
# John Henderson#
#   (adapted from Erin Hartman and Danny Hidalgo's code)#
# PS 236A/ Stat 239A Fall 2012#
################################################
#
# What is R?#
#  - language and environment mostly used for statistical computing and graphics#
#  - based on S, a statistical programming language started at Bell Labs#
#  - has a basis in Fortran and Scheme#
#  - extensible, capable of plugging in Fortran, C, C+, and others#
#  - open source (and free!)#
#  - many people contribute an abundance of useful packages     #
# Some Downsides?#
#  - inefficient for big computation problems #
#  - bad for big data, though getting better #
# Installation#
# can be found at:#
# <http://cran.r-project.org/>#
#  - download the binary for your OS (or install from source, if you wish)#
#  - run the installer and follow the instructions#
# Text Editing, Workflow and Coding Best Practices #
# good work flow will save you from headaches and heartaches!#
# 1. always map your work flow in a summary file#
# 2. code well, clearly, and consistently, and comment obsessively!#
# 3. always log your results and data output    #
# 4. good file management starts with you!#
#  - code like you're drafting an essay for publication #
#  - use a text editor, and absolutely not the GIU command line#
#  - run in batches, debug and rerun #
# Emacs/Aquamacs is highly recommended #
# <http://www.gnu.org/software/emacs/>#
# <http://aquamacs.org/> #
#
# TextMate (for Mac) is also useful #
# <http://macromates.com/>#
# UCB has a free license             #
# Remote R [From your Terminal]          #
#  - terminal, to run without hanging up#
# nohup means you can break the R session locally, while R still runs, need & #
#  --nice means your are a nice person [can also do --vanilla]; allows local priority#
# nohup R < infile > outfile --nice &                                        #
# Getting to R#
# <http://en.wikibooks.org/wiki/R_Programming/>#
# Most useful tool in R, help                  #
# Starts an interactive html help file#
help.start()#
#
# help function for 'mean'#
help(mean)#
#
# also help for 'mean'#
?mean#
#
# search#
# suppose we want to find the command for the product of a vector#
help.search("product")#
#
# Installing Packages:#
# Jas's matching package#
# note: dependencies = TRUE is important to also download all child packages#
install.packages("Matching", dependencies = TRUE)#
install.packages("rgenoud")#
#
# useful package for dealing with external data files#
install.packages("foreign")#
#
# Using packages:#
#
# we must load the package we just installed in order to use it#
# note: you only have to install once, but you must load libraries every time you want to use them #
#
library(Matching)#
library(MASS)#
library(foreign)#
# note that now, we can find the help file#
help(read.csv)#
#
# Navigating:#
#
#see what working directory you are in:#
getwd()#
#
# change to another working directory#
setwd("~/Desktop/causalinf/fa2012/R/")#
getwd()#
#
# list all objects in your workspace (currently should be empty)#
ls()
ls()
search()
t(matrix(sca(),2))
t(matrix(scan(),2))
data <- read.csv(file = "exampleData1.csv")#
data
dim(data)
names(data)
data$x1
data$x2
t(data)
data$x2
loading data from an R library#
# use the lalonde data set in the Matching library#
data(lalonde)#
ls()#
names(lalonde)#
dim(lalonde)#
lalonde$age
1:10
seq(from=1,to=10,by.3)
seq(from=1,to=10,by=.3)
making squares#
myX <- 1:4#
myX#
#
# note: for an array, ^2 will to element wise operation#
myX <- myX^2#
myX
data
data*2
data^2
data^10
myX
myX<1
myX>1
dim(data)
data[,1]
data$x1
data[1,]
data[1:10,]
data[1:10,2]
data[1:10,2:4]
c(data[,1])
c(data[,1],data[,2])
c(data[,1],data[,2])
c(data[c(1,5,8),])
c(data[c(1,5,8),1])
for( i in 1:5) {#
	print(paste("Surfs up!  I'm on interation", i))#
}
for( i in 1:5) {#
	print(paste("Surfs up!  I'm on interation", i))#
}
for( i in 1:5) {#
	print(paste("Surfs up!  I'm on interation", i))#
}
for( i in c(3,10,9)) {#
	print(paste("Bummer!  I've got i equal to", i))#
}
for( i in 5:1) {#
	print(paste("Surfs down!  I'm on interation", i))#
}
for( i in c(3,10,9)) {#
	print(paste("Bummer!  I've got i equal to", i))#
}
means <- apply(data, MARGIN = 2, mean)#
means
means <- apply(data, MARGIN = 1, mean)#
means
rowMeans(data)
colMeans(data)
data(cars)#
attach(cars)#
#
help(lm)
lm1 = lm(dist ~ speed)#
summary(lm1)
t(data)
t(data)*data
t(data)%*%data
as.matrix(data)
data=as.matrix(data)
t(data)%*%data
solve(t(data)%*%data)
chol(solve(t(data)%*%data))
?chol
